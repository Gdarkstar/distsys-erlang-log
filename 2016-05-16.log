[01:18:01] *** Joins: rakshith (~hehaichi@61.3.24.144)
[02:02:38] *** Quits: rakshith (~hehaichi@61.3.24.144) (Ping timeout: 265 seconds)
[08:34:24] <vinayb> testing log 2
[08:41:23] <vinayb> some more testing
[08:43:59] *** vinayb changes topic to 'Distributed Systems Programming with Erlang | Today's log: https://goo.gl/3ud7jK'
[09:02:45] *** Joins: botBot_ (736337c3@gateway/web/freenode/ip.115.99.55.195)
[09:10:55] *** Joins: salman_ (b63a6b9b@gateway/web/freenode/ip.182.58.107.155)
[09:18:10] <vinayb> hello salman_ 
[09:18:21] <salman_> Hi vinayb
[09:18:33] <salman_> :D
[09:18:50] <salman_> How much time to start?
[09:19:11] <botBot_> Gonna wait till people show up, might start by 7 15 or so
[09:19:51] <salman_> Great I'll get a Shawrma and come :p
[09:20:07] <salman_> I'm assuming botBot_ is Akshay?
[09:20:28] <vinayb> no no it's my other monitoring account :P
[09:20:34] <vinayb> ahh shawarma
[09:20:38] <vinayb> sounds delicious
[09:21:58] *** Joins: vilas_m (75dd2100@gateway/web/freenode/ip.117.221.33.0)
[09:23:08] <salman_> Like seriously vinayb creating fake accountss
[09:23:35] <salman_> You could have told me its my AI like JARVIS and I would've believed you :p
[09:26:30] <vinayb> I never said otherwise ;)
[09:28:24] *** Joins: aditya_a (75c04f5b@gateway/web/freenode/ip.117.192.79.91)
[09:30:02] *** Joins: Z1 (~akshayrev@117.215.134.228)
[09:31:01] *** Joins: m_gautham (75ca2125@gateway/web/freenode/ip.117.202.33.37)
[09:34:18] <Z1> oh god.. stop commiting every 1 minute da..
[09:34:54] *** Z1 is now known as akshayrevankar
[09:35:54] <vinayb> auto log bro :P 
[09:36:29] <akshayrevankar> save it in the VM and then finally log it.. no ones gonna check it every 1 minute on github, rather they use the IRC :P
[09:36:36] *** Joins: rakshith (~hehaichi@117.202.66.206)
[09:37:00] <vinayb> if somebody joins late, they can see the log akshayrevankar
[09:37:20] <vinayb> Hello everyone!
[09:37:23] <akshayrevankar> oh ok..
[09:37:25] <vinayb> We'll be starting soon
[09:39:21] <vinayb> Alright, let's begin. First, me and Akshay will introduce ourselves, then others, please do so :)
[09:39:32] *** Joins: rakshith_ (~hehaichi@117.202.66.206)
[09:39:40] <vinayb> I'm Vinay Bhat, second-year-finished IT. 
[09:40:25] <akshayrevankar> I'm Akshay Revankar, second-year ECE.
[09:40:52] *** Parts: rakshith_ (~hehaichi@117.202.66.206) ()
[09:41:19] *** Quits: rakshith (~hehaichi@117.202.66.206) (Ping timeout: 265 seconds)
[09:41:26] <vinayb> Both of us are your project heads for the Summer Project, and hopefully you all will like it :) 
[09:41:26] *** Joins: rakshith_ (~hehaichi@117.202.66.206)
[09:41:30] <m_gautham> i'm gautham first year cse
[09:41:30] <salman_> I'm Salman Shah 1st year IT
[09:41:32] <vilas_m> Hi! Vilas here, 1st year CS.
[09:41:38] <aditya_a> Iam A Aditya ,1st year IT
[09:41:50] <rakshith_> Hi, Rakshith here, 1st Year IT
[09:42:13] <vinayb> salman_, any chance you can contact Pratyush? 
[09:42:13] <salman_> Oh wait I'm second year IT*
[09:42:22] <salman_> Yes I'll call him
[09:42:24] <vinayb> Hello guys! Nice to meet you all
[09:43:00] <vinayb> Alright, so the topic of this channel as well as this Summer Project is: "Distributed Systems Programming with Erlang"
[09:44:01] <salman_> Pratyush is out he'll join us in some time.
[09:44:38] <vinayb> Today, the agenda is to explain these four related, and important concepts: Functional Concepts, Distributed systems, Concurrency, Parallelism
[09:44:53] <vinayb> and answer the question "Why Erlang?"
[09:45:01] <vinayb> "Why should I learn a new programming language?"
[09:45:40] <vinayb> Also, after we're done today, I'll send you links to download and setup Erlang. I'll be available on this channel if you run into problems.
[09:45:59] *** Joins: Pratyushgr (40e9ad94@gateway/web/freenode/ip.64.233.173.148)
[09:46:06] <vinayb> Does anyone have an idea about Distrbuted Systems here?
[09:46:23] <Pratyushgr> No. Not me
[09:46:33] <salman_> Yeah sort of
[09:46:48] <salman_> Is it the way Google's Search Algorithm runs
[09:46:55] <salman_> ?
[09:47:21] <rakshith_> not exactly..
[09:47:41] <vinayb> Right. That comes into the bigger picture of "Distributed Algorithms" but the idea is sorta same
[09:47:59] <vinayb> Okay, so all of you know C
[09:48:20] <vinayb> Now you might be wondering, I know C, I can solve problems with C, why should i bother with anything else
[09:48:57] <vinayb> Let's see some problems that come up with that approach
[09:48:59] *** Joins: rakshith (~hehaichi@117.202.66.206)
[09:49:19] <vinayb> say you have one big C program for some work
[09:49:57] <vinayb> Now, say it becomes very popular (assume it's hosted on the web), and some 50 million users want to use it
[09:50:36] <vinayb> Since so many people start using it, somethings become problematic
[09:50:54] <vinayb> Accessibility: 50 millionth person has to wait for all others to finish!
[09:50:58] *** Quits: Pratyushgr (40e9ad94@gateway/web/freenode/ip.64.233.173.148) (Ping timeout: 250 seconds)
[09:51:33] <vinayb> Reliability: 50 million people want to use it simultaneously, the immense load breaks the program, and it crashes!
[09:52:08] <vinayb> Availability: Since it crashed, now no one can use it
[09:52:46] <vinayb> Now, let's define Distributed Systems, and see how they deal with this pain points
[09:53:30] <vinayb> Distributed Systems, put simply, are individual programs, all coordinating with each other by passing messages
[09:54:01] <vinayb> Distributed Systems might be implemented as lots of tiny programs communicating with each other, but the outside impression if of "JUST ONE PROGRAM"
[09:54:25] <vinayb> for example: everybody knows google.com, but google is implemented across lots and lots of servers
[09:54:41] <vinayb> but you think of "google search" as one big entity
[09:55:06] <vinayb> so that's the notion of distribution: dividing, communicating, yet giving the appearence of one big system
[09:55:32] <vinayb> so those systems are "Distributed Systems": a collection of independent computers that appears to its users as a single coherent system
[09:55:41] <vinayb> any doubts as of now?
[09:55:47] <vilas_m> No
[09:55:50] <salman_> Umm yeah
[09:55:58] <rakshith_> no
[09:56:03] <aditya_a> no
[09:56:03] <salman_> Can u tell why  a program crashes?
[09:56:15] <salman_> As in its independent code on each computer
[09:56:21] <salman_> Why will it crash?
[09:57:26] <vinayb> Our assumption is that it is running only on one computer. So if 50 million people try accessing it, now imagine 50 million * X MB of data needs to given, the CPU needs to process them.. it overwhelms the computer and it crashes
[09:58:02] <vinayb> and by XMB of data, I mean physical RAM: which is only few gigabytes
[09:58:16] <salman_> Oh okay
[09:58:21] <vinayb> Distribution helps PREVENT this
[09:58:22] <salman_> Please continue
[09:58:36] <salman_> How?
[09:58:49] <vinayb> Let's see that. So the pain points:
[09:59:19] <vinayb> Accessibility: By having 100s of instances of a program, you make it more accessable to users.
[09:59:30] <vinayb> which is obvious
[09:59:49] <vinayb> Reliability: If one fails, there's still lots other instances
[10:00:21] <vinayb> Availability: Say one component failed. Yet there are lots others which will ensure users can use the program
[10:01:48] <vinayb> Now, let's talk a bit about Functional concepts. We'll see how it all relates to Distributed systems, and Concurrency, Parallelism
[10:02:15] <vinayb> In a Functional programming language such as Erlang, there's no notion of mutable data
[10:02:27] <vinayb> by mutable, i mean data that can be changed
[10:06:14] <salman_> ok
[10:06:16] *** Parts: aditya_a (75c04f5b@gateway/web/freenode/ip.117.192.79.91) ()
[10:06:43] *** Joins: aditya_a_ (75c04f5b@gateway/web/freenode/ip.117.192.79.91)
[10:06:54] <vinayb> so yes, Erlang has no variables!
[10:09:46] *** Joins: m__gautham (75ca2125@gateway/web/freenode/ip.117.202.33.37)
[10:09:54] *** Joins: botbot2 (dfe4bef0@gateway/web/freenode/ip.223.228.190.240)
[10:10:25] <vinayb> hey guys sorry, had a technical glitch
[10:10:39] *** Quits: m__gautham (75ca2125@gateway/web/freenode/ip.117.202.33.37) (Client Quit)
[10:11:15] <vinayb> alright, so as i said: there's notion of variables in erlang
[10:11:20] *** Quits: botBot_ (736337c3@gateway/web/freenode/ip.115.99.55.195) (Ping timeout: 250 seconds)
[10:11:32] <vinayb> This property is called "Referential Transparency"
[10:11:52] <vinayb> a function f(x) which returns the same value for some x, is referentially transparent!
[10:11:55] <vinayb> eg:
[10:12:05] <vinayb> f(x) = x + 5 is referentially transparent
[10:12:13] <vinayb> however, todays_date() is not
[10:12:18] <vinayb> as it changes every day
[10:12:22] <vinayb> any doubts?
[10:12:32] <salman_> no
[10:12:40] <vilas_m> no
[10:12:45] <m_gautham> no
[10:12:59] <rakshith_> no
[10:13:03] <aditya_a_> no
[10:14:17] <vinayb> alright, now this leads us to what we call a "pure" function
[10:14:35] <vinayb> a pure function is referentially transparent
[10:15:00] <vinayb> why is this good? can anyone tell me?
[10:15:08] <vinayb> what's the advantage of pure functions?
[10:15:12] <vinayb> you can guess anything
[10:15:52] <vilas_m> On different systems, you get the same result regardless of other conditions?
[10:15:52] <vinayb> anyone?
[10:16:12] <vinayb> vilas_m: execellent answer!
[10:16:31] <vinayb> much better that my not so excellent spelling
[10:16:35] <vinayb> *than
