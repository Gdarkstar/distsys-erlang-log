[02:53:06] *** Joins: pratyushgr (7aa25b24@gateway/web/freenode/ip.122.162.91.36)
[03:46:42] *** Quits: pratyushgr (7aa25b24@gateway/web/freenode/ip.122.162.91.36) (Ping timeout: 250 seconds)
[07:36:49] <vinayb> hola folks
[09:00:21] *** Joins: salman-bhai (b63a62f8@gateway/web/freenode/ip.182.58.98.248)
[09:08:40] <salman-bhai> https://summerofcode.withgoogle.com/projects/#5369657808650240
[09:08:52] <salman-bhai> Just in case anyone is interested.
[09:12:35] <vinayb> selections for this year's GSoC are over yeah?
[09:13:25] <salman-bhai> Yeah long back
[09:14:40] <salman-bhai> The projects have started today.
[09:14:54] <salman-bhai> Well they started coding today for the projects!
[09:15:45] <vinayb> oh interesting
[09:15:52] <vinayb> i should talk to Param 
[09:19:17] <salman-bhai> Do people get GSoC at the end of second year from NITK?
[09:20:34] <vinayb> some excellent people do. Karthik Senthil two years back. Param Hanji this year
[09:20:57] *** Joins: aditya (75c04a62@gateway/web/freenode/ip.117.192.74.98)
[09:23:51] *** Joins: m_gautham (673c4634@gateway/web/freenode/ip.103.60.70.52)
[09:23:59] <salman-bhai> Ah okay!
[09:31:06] <vinayb> let's wait a few minutes for everyone to arrive
[09:32:14] *** Joins: vilas_m (dfeefbf8@gateway/web/freenode/ip.223.238.251.248)
[09:32:47] *** vinayb changes topic to 'Distributed Systems Programming with Erlang | Today's log: https://goo.gl/v7EP1x'
[09:33:03] <salman-bhai> Hi everyone!
[09:34:04] <vilas_m> Hi Bhai! :P
[09:35:28] <aditya> Hi Sallu bhai!!
[09:36:00] <salman-bhai> @vinayb See I told u :D
[09:36:14] <vinayb> haha salman-bhai xD
[09:36:33] <vinayb> btw salman-bhai, can you please message your peers to join us here :P
[09:36:45] <salman-bhai> sure
[09:38:49] <vinayb> alright, we'll begin
[09:38:55] <salman-bhai> Pratyush will join us in 5 minutes
[09:39:03] <vinayb> All of you guys ready?
[09:39:10] <salman-bhai> yeah
[09:39:11] <vilas_m> Yea
[09:39:25] <aditya> yes!
[09:39:55] <vinayb> salman-bhai, if you can, msg the others too
[09:40:02] <vinayb> okay so today we'll start off with modules
[09:40:12] <vinayb> in the past session, we saw the erlang shell 
[09:40:19] <vinayb> and how to run our expressions on it
[09:40:38] <vinayb> But any sort of longform programming is not possible :P 
[09:40:45] <vinayb> so we need to write in files
[09:40:59] <vinayb> Modules are a bunch of functions regrouped in a single file, under a single name.
[09:41:27] <vinayb> Additionally, all functions in Erlang must be defined in modules
[09:41:44] <vinayb> You have already used modules, perhaps without realizing it
[09:41:51] <vinayb> hd() and tl()
[09:41:58] <vinayb> these belong to the erlang module
[09:42:14] <vinayb> as well as all of the arithmetic, logic and boolean operators
[09:42:21] *** Joins: adarsh_h (6ad881a9@gateway/web/freenode/ip.106.216.129.169)
[09:42:50] <vinayb> Functions from the "erlang" module are automatically imported when you use erlang
[09:43:14] <vinayb> Every other function defined in a module you will ever use needs to be called the form Module:Function(Arguments)
[09:43:21] <vinayb> if you open up your shell
[09:43:25] <vinayb> you can try this;
[09:43:29] <vinayb> *:
[09:43:38] <vinayb> erlang:element(2, {a,b,c}).
[09:43:48] <vinayb> element(2, {a,b,c}).
[09:44:03] <vinayb> they'll give the same result, as erlang module is always loaded in shell
[09:44:18] <salman-bhai> b
[09:44:44] <salman-bhai> Is the result/answer
[09:44:52] <vinayb> So let's talk about writing our own modules
[09:45:07] <vinayb> right salman-bhai !
[09:45:19] <salman-bhai> @vinayb
[09:45:26] <salman-bhai> What did we just do?
[09:45:35] <vinayb> When writing a module, you can declare two kinds of things: *functions* and *attributes*
[09:45:49] <vinayb> We called a function in the form Module:Function(Arguments)
[09:45:56] <salman-bhai> OKay ....
[09:46:02] <salman-bhai> Go on
[09:46:17] <vinayb> so, there's a module called "erlang" which has the function called element
[09:46:22] <vinayb> that's what we did
[09:46:55] <vinayb> alright guys, open a file and save it as erlang_module.erl
[09:47:14] <vinayb> you can use any code editor you wish
[09:47:26] <vinayb> or notepad too if you're feeling particularly brave
[09:47:37] *** Joins: Pratyushgr (b640b3ae@gateway/web/freenode/ip.182.64.179.174)
[09:47:46] <vinayb> in the first line of your file should be this: 
[09:47:57] <vinayb> -module(Name).
[09:48:07] <vinayb> so in our case, if you've saved the file as erlang_module.erl
[09:48:11] <vinayb> then it should be
[09:48:19] <vinayb> -module(erlang_module).
[09:49:01] <vinayb> then, we have another attribute called export
[09:49:11] <vinayb> you always need to mention your defined functions in export
[09:49:19] <vinayb> so that you can use them in your program
[09:49:23] <vinayb> shell*
[09:49:32] <vinayb> it's of the form:
[09:49:56] <vinayb> -export([Function1/Arity, Function2/Arity, ..., FunctionN/Arity]).
[09:50:04] <vinayb> Does any one know what arity is?
[09:50:42] <aditya> no of arguments?
[09:50:44] *** Joins: akshayrevankar (67157d53@gateway/web/freenode/ip.103.21.125.83)
[09:50:51] <vinayb> correct aditya !
[09:51:12] <vinayb> so add this line to your file:
[09:51:15] <vinayb> -export([add/2]).
[09:51:27] <vinayb> and then let's define our first function!
[09:51:33] <vinayb> add(A, B) ->
[09:51:39] <vinayb>   A + B.
[09:52:43] <vinayb> in Erlang, the syntax of a function follows the form Name(Args) -> Body., where Body is a bunch of Erlang expressions seperated by commas.
[09:52:55] <vinayb> There
[09:53:13] <vinayb> *There's no Return in erlang functions!
[09:53:44] <vinayb> Instead, the last logical expression of a function to be executed will have its value returned to te caller automatically without you having to mention it.
[09:53:58] <vinayb> now, add this function to your file too:
[09:54:04] <vinayb> hello() ->
[09:54:18] <vinayb>   io:format("Hello, world!~n").
[09:54:46] <vinayb> remember, don't forget to update your export line!
[09:54:53] <vinayb> it should be
[09:55:03] <vinayb> -export([add/2, hello/0]).
[09:55:06] <vinayb> now
[09:55:35] <vinayb> let's define one more function
[09:55:39] <vinayb> add this to your file too
[09:55:52] <vinayb> greet_and_add_two(X) ->
[09:55:56] <vinayb>   hello(),
[09:55:57] <vinayb>   add(X,2).
[09:56:23] <vinayb> alright! we're done with our first module!
[09:56:39] <vinayb> can someone copy their file and post it here?
[09:57:16] <vilas_m> -module(erlang_module).  -export([add/2, hello/0, greet_and_add_two/1]).  add(A, B) -> A + B.  hello() -> io:format("Hello, world!~n"). greet_and_add_two(X) -> hello(), add(X,2).
[09:57:21] <vinayb> and remember guys, you have to add greet_and_add_two/1 to the export line!
[09:57:37] <vinayb> nice work vilas_m !
[09:57:59] <vinayb> let's run our functions now
[09:58:01] <vinayb> open up your erlang shell
[09:58:11] <vinayb> then type this:
[09:58:20] <vinayb> cd("/path/to/your/file").
[09:58:52] <vinayb> so whichever folder you saved your file in, put that in the cd() function
[09:59:13] <vinayb> Windows users, don't forget, Windows paths have forward slashes
[09:59:48] <vinayb> for Linux users if you saved it in a folder called erlang_codes in your home directory
[09:59:52] <vinayb> then it would be
[09:59:57] <vinayb> cd("~/erlang_codes").
[10:00:12] <vinayb> okay, now type this:
[10:00:19] <vinayb> c(erlang_module).
[10:00:28] <vinayb> this will load our module in the shell!
[10:00:43] <vinayb> then you call the functions!
[10:00:53] <vinayb> in the format Module:Function(Arguments)
[10:00:54] <vinayb> so:
[10:01:02] <vinayb> erlang_module:add(7,2).
[10:01:10] <vinayb> erlang_module:hell().
[10:01:17] <vinayb> sorry, that should be
[10:01:23] <vinayb> erlang_module:hello().
[10:01:42] <vinayb> erlang_module:greet_and_add_two(-3).
[10:01:47] <vinayb> now, somebody post the outputs here!
[10:04:35] <vinayb> vilas_m: Is the code running?
