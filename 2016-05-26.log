[07:55:11] *** Joins: rakshith (~hehaichi@103.194.14.43)
[08:10:38] <vinayb> hey guys!
[08:18:00] <vinayb> help_me(Animal) ->
[08:18:01] <vinayb> Talk = if Animal == cat  -> "meow";
[08:18:01] <vinayb> Animal == beef -> "mooo";
[08:18:01] <vinayb> Animal == dog  -> "bark";
[08:18:01] <vinayb> Animal == tree -> "bark";
[08:18:03] <vinayb> true -> "fgdadfgna"
[08:18:05] <vinayb> end,
[08:18:07] <vinayb> {Animal, "says " ++ Talk ++ "!"}.
[08:19:16] *** Joins: aditya (3d031604@gateway/web/freenode/ip.61.3.22.4)
[08:19:19] *** Joins: gautham_ (75c671ab@gateway/web/freenode/ip.117.198.113.171)
[08:20:52] *** Quits: rakshith (~hehaichi@103.194.14.43) (Ping timeout: 258 seconds)
[08:21:26] *** Joins: rakshith (67c20e2b@gateway/web/freenode/ip.103.194.14.43)
[08:22:49] *** Joins: rakshith_ (~hehaichi@103.194.14.43)
[08:23:28] *** Parts: rakshith (67c20e2b@gateway/web/freenode/ip.103.194.14.43) ()
[08:23:41] *** Quits: rakshith_ (~hehaichi@103.194.14.43) (Client Quit)
[08:24:00] *** Joins: rakshith (~hehaichi@103.194.14.43)
[08:29:12] *** Quits: aditya (3d031604@gateway/web/freenode/ip.61.3.22.4) (Quit: Page closed)
[08:29:41] *** Joins: aditya_a (3d031604@gateway/web/freenode/ip.61.3.22.4)
[08:31:00] <vinayb> hey guys we'll start in 5 mins
[08:31:47] <vinayb> how's all of yours vacations going? :P
[08:32:51] <rakshith> What's the idea behind assignments? :P
[08:33:16] <vinayb> To get you accustomed to harder assignments to come :P
[08:34:38] *** vinayb changes topic to 'Distributed Systems Programming with Erlang | Today's log: https://goo.gl/fEkQJ3'
[08:35:32] <vinayb> okay let's begin
[08:35:37] <vinayb> today's session won't be too long
[08:35:46] <vinayb> So let's come to if expressions
[08:36:04] <vinayb> everybody here knows if statements in C right?
[08:36:16] <rakshith> yeah
[08:36:29] <aditya_a> yes
[08:36:54] <gautham_> yes
[08:37:22] <vinayb> alright. If *expressions* in Erlang are a little different, let's see how
[08:37:28] <vinayb> open up your shell
[08:37:31] <vinayb> and a file
[08:37:39] <vinayb> add this function:
[08:37:52] <vinayb> always_true() -> 
[08:38:02] <vinayb>   if 1 =:= 1 ->
[08:38:06] <vinayb>     works
[08:38:13] <vinayb>   end.
[08:38:42] <vinayb> compile and run it. what's the output?
[08:40:10] *** Joins: salman-bhai (b63a36dd@gateway/web/freenode/ip.182.58.54.221)
[08:40:58] <salman-bhai> Sorry for being late.
[08:41:06] <vinayb> no problem.
[08:41:10] <vinayb> guys, what's the output?
[08:41:27] <rakshith> works
[08:41:35] <vinayb> right!
[08:41:38] <vinayb> now redefine it
[08:41:41] <vinayb> always_works() ->
[08:41:57] <vinayb>   if 1 =:= 2; 1 =:= 1 ->
[08:42:05] <vinayb>     still_works
[08:42:07] <vinayb>   end.
[08:42:15] <vinayb> what's the output?
[08:42:26] <aditya_a> works
[08:42:38] <vinayb> for the second one?
[08:43:03] <aditya_a> yes
[08:43:05] <rakshith> still_works
[08:43:49] <vinayb> correct! everything seems to be working fine, right? if expressions are just like your if statements
[08:43:53] <vinayb> now try this:
[08:43:58] <vinayb> always_fails() ->
[08:44:15] <vinayb>   if 1 =:= 2, 1 =:= 1 ->
[08:44:17] <vinayb>     fails
[08:44:19] <vinayb>   end.
[08:44:25] <vinayb> what's the output?
[08:47:06] <vinayb> anyone?
[08:47:06] <rakshith> I get a warning
[08:47:14] <rakshith> no clause will ever match
[08:47:25] <vinayb> what do you get when you run the function?
[08:47:30] <rakshith> the guard for this clause always evaluated to false
[08:47:47] <rakshith> exception error
[08:48:00] <vinayb> correct! any guesses why that happens?
[08:48:34] <rakshith> there is no else clause?
[08:49:28] <vinayb> alright, remember how i said all expressions in Erlang are supposed to return something? that's true for if expressions too! When no matching clause can be found, it's an error because Erlang doesn't know what the expression should return
[08:49:40] <vinayb> yes rakshith , in Erlang there is no else clause
[08:49:52] <vinayb> so this is how else clauses are made in Erlang:
[08:50:12] <vinayb> maybe_true(N) ->
[08:50:24] <vinayb>   if N =:= 2 -> might_succeed;
[08:50:30] <vinayb>     true -> always_does
[08:50:31] <vinayb>   end.
