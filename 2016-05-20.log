[07:55:40] *** Joins: salman_ (b63a6584@gateway/web/freenode/ip.182.58.101.132)
[08:08:33] *** Joins: pratyushgr (7aa2348f@gateway/web/freenode/ip.122.162.52.143)
[08:08:50] <pratyushgr> hello
[08:12:38] <vinayb> hey pratyushgr 
[08:13:45] <pratyushgr> actually i am not clear about "what is functional concepts"
[08:14:16] <pratyushgr> the other day i got disconnected while it was being discussed
[08:16:02] <vinayb> sorry, had a technical glitch. what doubt do you have?
[08:16:22] <salman_> functional concepts
[08:16:36] <vinayb> ya what in that?
[08:16:48] <salman_> definition
[08:16:56] <salman_> what it is..
[08:17:25] <pratyushgr> yaa..what it is..
[08:19:12] <vinayb> functional concepts relate to pure functions, which don't have any side effects, now side effects can mean touching on something other than the function. pure function returns always the same value for a given parameter. however you can't make a useful program using only pure functions. You need IO. So functional languages allow you to explicitly seperate the pure functions from the impure, and functio
[08:19:18] <vinayb> nal programming is all about composing these functions together, like f o g, g o f etc/
[08:23:19] <vinayb> any doubts?
[08:23:49] <pratyushgr> yaa got it..
[08:24:21] <pratyushgr> can u give an example of pure function
[08:25:19] <vinayb> f(x) = x + 5
[08:25:50] <vinayb> whatever be value of x, for that x it will always give same value
[08:26:36] <pratyushgr> ohk
[08:26:44] <vinayb> todays_date() however is a function that always gives different values depending on which day it is
[08:27:43] <vinayb> and you can get the logs from the link on the topic :)
[08:29:01] <pratyushgr> yeah.
[08:29:11] <pratyushgr> Thankx
[08:31:39] <salman_> I had a doubt in installing Erlang on Linux
[08:32:03] <salman_> All I did was sudo apt-get install erlang
[08:32:16] <salman_> And then all those folders started downloading
[08:32:29] <salman_> Was there anything else to do as well?
[08:33:34] <vinayb> Does the erlang shell open when you type erl on the command line?
[08:34:04] *** vinayb changes topic to 'Distributed Systems Programming with Erlang | Today's log: https://goo.gl/aRNIyA'
[08:37:41] <salman_> Oh okay it does
[08:37:55] <salman_> I'm assuming that's it right?
[08:38:08] <vinayb> ya then everything is right
[08:39:59] <salman_> Cool
[08:42:22] *** Quits: pratyushgr (7aa2348f@gateway/web/freenode/ip.122.162.52.143) (Ping timeout: 250 seconds)
[09:25:07] *** Joins: m_gautham (3b58c676@gateway/web/freenode/ip.59.88.198.118)
[09:26:51] *** Joins: aditya (75d8eb3d@gateway/web/freenode/ip.117.216.235.61)
[09:28:18] *** Quits: salman_ (b63a6584@gateway/web/freenode/ip.182.58.101.132) (Ping timeout: 250 seconds)
[09:30:28] *** Joins: anirudhgp (~androirc@2604:2000:f246:9100:7427:2428:d3ea:2e81)
[09:31:11] *** Joins: adarsh_honawad (6ace810d@gateway/web/freenode/ip.106.206.129.13)
[09:31:35] *** Joins: sshah (b63a6584@gateway/web/freenode/ip.182.58.101.132)
[09:33:03] <sshah> When do we start?
[09:33:28] <vinayb> we'll start now
[09:33:37] <sshah> Cool
[09:33:38] <vinayb> Hey everyone! Vinay here
[09:33:56] *** Quits: m_gautham (3b58c676@gateway/web/freenode/ip.59.88.198.118) (Ping timeout: 250 seconds)
[09:33:56] <anirudhgp> Hi!
[09:33:58] <sshah> Hi VInay :P
[09:34:09] <adarsh_honawad> Hi vinay, i am adarsh
[09:34:09] <vinayb> Alright, so has everyone gotten Erlang set up on their systems?
[09:34:22] <vinayb> hey adarsh_honawad :)
[09:34:29] <adarsh_honawad> yep
[09:34:54] <vinayb> To those of you on Linux, type erl on the command line to open the erlang shell
[09:35:09] <vinayb> and to those on Windows, open erl.exe 
[09:35:16] <vinayb> or werl.exe
[09:35:25] <vinayb> just search for it
[09:35:55] *** Joins: rakshith (~hehaichi@117.192.110.99)
[09:36:10] <vinayb> have you guys started the shell?
[09:36:48] <adarsh_honawad> yeah
[09:36:59] <sshah> yes
[09:37:35] <aditya> yes
[09:37:49] <vinayb> Alright, so Erlang has a shell for interactive programming
[09:38:05] <vinayb> it's called a REPL
[09:38:11] <vinayb> A read-eval-print-lop
[09:38:13] <vinayb> *loop
[09:38:32] <vinayb> So you type in an expression, it evaluates it, and shows you the result!
[09:39:10] <vinayb> type in help().
[09:39:19] <vinayb> and note the fullstop!
[09:39:45] <vinayb> you can see q() there
[09:40:04] <vinayb> so to quit the shell session all you have to type is q().
[09:40:31] *** Quits: anirudhgp (~androirc@2604:2000:f246:9100:7427:2428:d3ea:2e81) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[09:40:43] <vinayb> if your shell hangs, do Ctrl+G and then type h
[09:40:51] <rakshith> its called erl in my build
[09:41:34] <vinayb> yeah, erl is the erlang shell :)
[09:41:57] <vinayb> okay then! let's start
[09:42:17] <vinayb> Erlang is a relatively small and simple language (in the way C is simpler than C++)
[09:42:27] <vinayb> there are a few basic data types
[09:42:34] <vinayb> we'll start off with them
[09:42:35] *** Joins: gautham_ (75ca21f6@gateway/web/freenode/ip.117.202.33.246)
[09:43:16] <vinayb> In the Erlang shell, expressions have to be terminated with a period followed by whitespace (line break, a space etc.)
[09:43:28] *** Quits: sshah (b63a6584@gateway/web/freenode/ip.182.58.101.132) (Ping timeout: 250 seconds)
[09:43:40] <vinayb> a little unusual syntax, but you'll get used to it
[09:44:12] <vinayb> type in 2 + 15.
[09:44:17] <vinayb> or any such expressions
[09:44:27] <vinayb> 5 div 2.
[09:44:30] <vinayb> 5 rem 2.
[09:44:32] <vinayb> etc
[09:44:41] <vinayb> don't forget the fullstop!
[09:45:06] <gautham_>  
[09:45:37] <vinayb> similarly like C, there is *, +, - operators
[09:46:29] <vinayb> like C, there are floating point values also:
[09:46:32] <vinayb> 5 / 2.
[09:46:40] <vinayb> can anyone tell me what this returns?
[09:46:52] <aditya> 2.5
[09:46:53] <rakshith> 2.5
[09:47:08] *** Joins: Pratyushgr (b640471a@gateway/web/freenode/ip.182.64.71.26)
[09:47:08] <vinayb> and in C? ;)
[09:47:13] <adarsh_honawad> 2
[09:47:50] <vinayb> Correct! so UNLIKE C, Erlang doesn't care if you enter floating point numbers or integers: both types are supported when dealing with arithmetic
[09:48:26] <vinayb> However, if you want to have integer-to-integer division, you can use `div`, and for module operator, use `rem`
[09:49:06] <vinayb> ok so what is returned when you type in 2#101.
[09:49:06] <vinayb> ?
[09:49:19] <aditya> 5
[09:49:45] <vinayb> right! and can anyone guess why is that?
[09:50:00] <rakshith> 101 is 5 in binary?
[09:50:14] <rakshith> I mean 5 is 101
[09:50:15] <rakshith> :P
[09:50:59] <vinayb> yep! so if you want to express integers in other bases than 10, just enter the number as `Base#Value`
[09:51:10] <vinayb> you can try out 16#AE.
[09:51:15] <vinayb> 8#0677.
[09:51:17] <vinayb> etc
[09:51:44] <vinayb> now, let's come to Variables in Erlang
[09:51:58] <vinayb> does anyone remember what i said about variables in functional languages?
[09:52:45] <rakshith> they're immutable
[09:53:17] <vinayb> yep! so once you assign them a value you can't change it
[09:53:42] <vinayb> variables begin with an uppercase letter in erlang
[09:53:52] *** Quits: gautham_ (75ca21f6@gateway/web/freenode/ip.117.202.33.246) (Ping timeout: 250 seconds)
[09:53:54] <vinayb> try typing out these examples:
[09:53:56] <vinayb> One.
[09:53:59] <vinayb> One = 1.
[09:54:10] <vinayb> Two = One + One.
[09:54:20] <vinayb> Two = Two + 1.
[09:54:23] *** Joins: gautham_ (75dd25de@gateway/web/freenode/ip.117.221.37.222)
[09:54:37] <vinayb> what's the output for the last one?
[09:55:13] <rakshith> exception error
[09:55:15] <aditya> exception error: no match of right hand side value 3
[09:55:45] <vinayb> yep, it's an error, because variables are immutable in Erlang
[09:56:12] <Pratyushgr> error
[09:56:22] <vinayb> the '=' operator also checks for equality of both sides!
[09:56:34] <vinayb> that's why Erlang says RHS not equal to LHS :P
[09:56:57] <vinayb> you'll get a similar error if you try to do
[09:57:01] <vinayb> 47 = 45 + 3.
[09:57:44] <Pratyushgr> yes.
[09:57:45] <vinayb> type in this: Variable.
[09:57:52] <vinayb> what does it say?
[09:58:09] <rakshith> unboun
[09:58:11] <aditya> variable 'Variable' is unbound
[09:58:12] <rakshith> d
[09:59:02] <vinayb> correct. So when the '=' operator is used on an unbound variable, it evaluates the RHS, and then BINDS the variable to it, forever!
[09:59:38] <vinayb> except until you close the shell, of course
[10:00:35] <vinayb> Just for TESTING/DEBUGGING reasons: it is possible to unbound a variable by doing f(Variable) 
[10:00:40] <vinayb> only in the shell
[10:01:06] <vinayb> Let's come to a fascinating data type called atoms
[10:01:18] *** Joins: salman_shah (b63a6584@gateway/web/freenode/ip.182.58.101.132)
[10:01:27] <vinayb> There is a reason why variable names can't begin with a lowercase character: atoms
[10:01:40] <vinayb> Atoms are literals, constants with their own name for value
[10:02:11] <vinayb> The atom 'cat' means "cat" and that's it. You can't play with it, you can't change it, you can't smash it to pieces, it's 
[10:02:22] <vinayb> `cat`, Deal with it :P
[10:02:33] <vinayb> try typing these examples:
[10:02:35] <vinayb> atom.
[10:02:40] <vinayb> atoms_rule.
[10:02:47] <vinayb> atoms_rule@erlang.
[10:03:01] <vinayb> 'Atoms can be cheated!'.
