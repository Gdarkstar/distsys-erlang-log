[08:24:39] <vinayb> hey folks
[08:24:41] <vinayb> how's it going
[08:26:32] *** Joins: aditya_ (3d031751@gateway/web/freenode/ip.61.3.23.81)
[08:27:37] *** vinayb changes topic to 'Distributed Systems Programming with Erlang | Today's log: https://goo.gl/oXe00J'
[08:30:41] <aditya_> Wat r u going to teach today?
[08:31:11] <vinayb> passing around state between processes, selectively receiving certain messages, time delays etc
[08:31:41] <vinayb> and i'll also show you some code that'll clarify your flush doubt
[08:31:48] <aditya_> ok!
[08:32:11] <vinayb> we'll wait a few minutes for others to join
[08:32:16] <vinayb> and then we'll start
[08:32:38] <aditya_> Fine!
[08:36:53] <vinayb> we'll start now
[08:38:37] <vinayb> so now we've seen how to pass around simple messages between processes
[08:38:45] *** Joins: rakshith (~hehaichi@103.194.12.98)
[08:39:53] <vinayb> let's see how we can maintain state in a process, or rather how to store values which persist between repeated invocations of the process
[08:40:22] <vinayb> let's first create a function in a new kitchen.erl module that will let a process act like a fridge :P
[08:40:32] <vinayb> Here are the requirements: 
[08:40:52] <vinayb> we should be able to store food in the fridge, and take out food from the fridge
[08:41:07] <vinayb> it should only be possible to take food that has been stored beforehand
[08:41:24] <vinayb> type up this in the new file:
[08:42:09] <vinayb> -module(kitchen).
[08:42:10] <vinayb> -compile(export_all).
[08:42:10] <vinayb> fridge1() ->
[08:42:10] <vinayb>     receive
[08:42:10] <vinayb>         {From, {store, _Food}} ->
[08:42:12] <vinayb>             From ! {self(), ok},
[08:42:14] <vinayb>             fridge1();
[08:42:17] <vinayb>         {From, {take, _Food}} ->
[08:42:19] <vinayb>             %% uh....
[08:42:22] <vinayb>             From ! {self(), not_found},
[08:42:25] <vinayb>             fridge1();
[08:42:27] <vinayb>         terminate ->
[08:42:30] <vinayb>             ok
[08:42:32] <vinayb>     end.
[08:43:12] <vinayb> can anyone notice any issue with this function?
[08:43:19] <vinayb> does it meet our requirements?
[08:45:34] <aditya_>  'take'  food doesnt make sense ? from where?
[08:46:09] <vinayb> exactly! we are not storing food anywhere. so it's kinda impossible to take it
[08:46:31] <vinayb> basically, we need to maintain state 
[08:46:38] <vinayb> so we can use recursion
[08:46:58] <vinayb> then, the state to a process can be held entirely in the parameters of the function 
[08:47:40] <vinayb> in the case of our fridge process, a possibility would be to store all the food as a list, and then look in that list when someone needs to eat something:
[08:47:43] <vinayb> so type this up:
[08:48:35] <vinayb> fridge2(FoodList) ->
[08:48:35] <vinayb>     receive
[08:48:35] <vinayb>         {From, {store, Food}} ->
[08:48:35] <vinayb>             From ! {self(), ok},
[08:48:35] <vinayb>             fridge2([Food|FoodList]);
[08:48:37] <vinayb>         {From, {take, Food}} ->
[08:48:40] <vinayb>             case lists:member(Food, FoodList) of
[08:48:42] <vinayb>                 true ->
[08:48:45] <vinayb>                     From ! {self(), {ok, Food}},
[08:48:47] <vinayb>                     fridge2(lists:delete(Food, FoodList));
[08:48:50] <vinayb>                 false ->
[08:48:52] <vinayb>                     From ! {self(), not_found},
[08:48:55] <vinayb>                     fridge2(FoodList)
[08:48:57] <vinayb>             end;
[08:49:00] <vinayb>         terminate ->
[08:49:02] <vinayb>             ok
[08:49:05] <vinayb>     end.
[08:50:08] <vinayb> now type this in the shell:
[08:50:08] <vinayb> c(kitchen).
[08:50:24] <vinayb> Pid = spawn(kitchen, fridge2, [[baking_soda]]).
[08:50:36] <vinayb> Pid ! {self(), {store, milk}}.
[08:50:42] <vinayb> flush().
[08:50:52] <vinayb> what's the output?
[08:52:04] <vinayb> Pid ! {self(), {store, chocolate}}.
[08:52:14] <vinayb> Pid ! {self(), {take, chocolate}}.
[08:52:27] <vinayb> Pid ! {self(), {take, bread}}.
[08:52:29] <vinayb> flush().
[08:52:36] <vinayb> what are the outputs for these too?
[08:53:39] <rakshith> Shell got {<0.61.0>,ok}
[08:53:40] <rakshith> Shell got {<0.61.0>,{ok,chocolate}}
[08:53:40] <rakshith> Shell got {<0.61.0>,not_found}
[08:53:40] <rakshith> ok
[08:55:17] <vinayb> right! so basically what we are doing in this process is that we are storing the entire list in the parameter, and appending to it whenever we have to "store" something. When we have to take out something, we check if it is there in the list or not, if it is, we remove it, if not, we return not_found
[08:55:22] <vinayb> any doubts?
